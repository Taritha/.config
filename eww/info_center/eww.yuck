;;
;;  EWW Config
;;  Author: @taritha_
;;

; CPU stats
(defpoll cpu_use :interval "2s" "scripts/cpu.sh --cpu")
(defpoll cpu_freqs :interval "2s" "scripts/cpu.sh --freqs")
(deflisten cpu_threadcount :initial "[0, 0]" "scripts/cpu.sh --cpus")
(deflisten cpu_thread_use :initial "[0, 0]" "scripts/cpu.sh --cores")
(defpoll cpu_temp :interval "2s" "scripts/avg_temp.sh")

; GPU stats
(defpoll gpu_use :interval "2s" "scripts/gpustats.sh 0 --use")
(defpoll gpu_memuse :interval "2s" "scripts/gpustats.sh 0 --mem_percent")
(defpoll gpu_mem_mb :interval "2s" "scripts/gpustats.sh 0 --mem_mb")
(deflisten gpu_mem_total "scripts/gpustats.sh 0 --mem_total")
(defpoll gpu_power :interval "2s" "scripts/gpustats.sh 0 --power")
(deflisten gpu_pcap "scripts/gpustats.sh 0 --pcap")
(defpoll gpu_coretemp :interval "2s" "scripts/gpustats.sh 0 --coretemp")
(deflisten gpu_crittemp "scripts/gpustats.sh 0 --crittemp")
(defpoll gpu_hottemp :interval "2s" "scripts/gpustats.sh 0 --hottemp")
(deflisten gpu_crithtemp "scripts/gpustats.sh 0 --crithtemp")
(defpoll gpu_freq :interval "2s" "scripts/gpustats.sh 0 --corefreq")
(defpoll gpu_memfreq :interval "2s" "scripts/gpustats.sh 0 --memfreq")
(deflisten gpu_name "scripts/gpustats.sh 0 --name")

; Time
(defpoll time :interval "1s" "scripts/time.sh --time")
(defpoll date :interval "10s" "scripts/time.sh --date")
(defpoll cur_day :interval "10m" "date '+%d'")
(defpoll cur_year :interval "30m" "date '+%Y'")

; Weather
(defpoll current_weather :interval "15m" "python scripts/weather.py")
(defpoll current_temp :interval "15m" "python scripts/weather.py -f -c curr_temp")
(defpoll current_vibes :interval "15m" "python scripts/weather.py -f -c curr_vibes")
(defpoll current_pressure :interval "15m" "python scripts/weather.py -f -c curr_pressure")
(defpoll current_humidity :interval "15m" "python scripts/weather.py -f -c curr_hum")
(defpoll current_uvi :interval "15m" "python scripts/weather.py -f -c curr_uvi")
(defpoll current_windspeed :interval "15m" "python scripts/weather.py -f -c curr_ws")
(defpoll current_winddir :interval "15m" "python scripts/weather.py -f -c curr_wd")
(defpoll current_icon :interval "15m" "python scripts/weather.py -f -c curr_icon")
(defpoll hourly_temps :interval "1h" "python scripts/weather.py -f -c hourly_temps")
(defpoll hourly_times :interval "1h" "python scripts/weather.py -f -c hourly_times")
(defpoll daily_temps :interval "6h" "python scripts/weather.py -f -c daily_avgs")
(defpoll daily_names :interval "6h" "python scripts/weather.py -f -c daily_names")
(defpoll daily_descs :interval "6h" "python scripts/weather.py -f -c daily_descs")
(defpoll daily_icons :interval "6h" "python scripts/weather.py -f -c daily_icons")
(defvar hourly_idxs "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]")
(defvar daily_idxs "[0, 1, 2, 3, 4, 5, 6]")

; Network
(defpoll e_netstatus :interval "2s" "scripts/netstatus.sh enp5s0")
(defpoll w_netstatus :interval "2s" "scripts/netstatus.sh wlp4s0")
(defpoll e_conn :interval "2s" "scripts/netstatus.sh enp5s0 -c")
(defpoll w_conn :interval "2s" "scripts/netstatus.sh wlp4s0 -c")

; Miscellaneous
(defvar plot_time_range "300s")
(defpoll uptime :interval "1m" "uptime -p | sed -e 's/up //;s/ hours,/h/;s/ minutes/m/'")
(defpoll packages :interval "5m" "pacman -Q | wc -l")
(defvar profile_img "images/BigLogo.png")
(defpoll username :interval "10h" "whoami")
(defpoll hostname :interval "10h" "hostnamectl | grep Static | awk '{print $3}'")
(defvar cal_reveal false)

;
;   Widgets
;

; Plots for things like gpu/cpu temp, usage, etc.
(defwidget sys-plot [plotheight plotlabel unit statistic rangelim dynamic]
  (box
    :class "plot-stat-box"
    :orientation "v"
    :height plotheight
    :space-evenly false
    :spacing 10
    (label :class "plot-label-text" :text "${plotlabel} (${unit})" :halign "start")
    (box :class "plot-border-separator" :height 3)
    (box
      :orientation "h"
      :space-evenly false
      :spacing 10
      :vexpand true
      (centerbox
        :class "plot-scale-box-text"
        :orientation "v"
        :width 45
        (label :class "plot-scale-text" :text "${rangelim}" :halign "end" :valign "start")
        (label :class "plot-scale-text" :text "${round(rangelim / 2, 0)}" :halign "end" :valign "center")
        (label :class "plot-scale-text" :text "0" :halign "end" :valign "end")
      )
      (graph
        :class "stat-graph"
        :value "${(statistic / rangelim) * 100}" ; Normalizes value to 0-100
        :thickness 2
        :time-range plot_time_range
        :hexpand true
        :vexpand true
        :max 100
        :dynamic "${dynamic}"
      )
      (label :class "plot-display-text" :text "${statistic} ${unit}" :angle 270)
    )
  )
)

; CPU frequency plots
(defwidget freq-plot [unit statistic rangelim]
  (box
    :orientation "h"
    :space-evenly false
    :spacing 0
    :vexpand true
    :height 40
    :width 310
    (box
      :class "plot-scale-box-text"
      :orientation "v"
      :width 45
      (label :class "plot-scale-text-freq" :text "${rangelim}" :halign "end" :valign "start")
      (label :class "plot-scale-text-freq" :text "${round((rangelim * 2 / 3), 0)}" :halign "end" :valign "center")
      (label :class "plot-scale-text-freq" :text "${round((rangelim / 3), 0)}" :halign "end" :valign "end")
    )
    (graph
      :class "stat-graph"
      :value "${(statistic / rangelim) * 100}" ; Normalizes value to 0-100
      :thickness 1
      :time-range plot_time_range
      :hexpand true
      :vexpand true
      :min 33
      :max 100
      :dynamic false
    )
    (label :class "plot-display-text-freq" :text "${statistic} ${unit}" :angle 270)
  )
)

; Suite of gpu status plots
(defwidget gpu-graphs []
  (box :orientation "v"
    (scroll
      :class "graph-box-backdrop"
      :height 600
      :vscroll true
      :vexpand true
      (box
        :class "plot-scroll-box"
        :orientation "v"
        :spacing 15
        :space-evenly false
        (label :class "plot-header-text" :text "GPU Stats")
        (input :class "plot-tr-inputbox" :value "Time range (s)" :onaccept "${EWW_CMD} update plot_time_range={}s")
        (sys-plot :plotheight 200 :plotlabel "Usage" :unit "%" :statistic gpu_use :rangelim 100 :dynamic false)
        (sys-plot :plotheight 200 :plotlabel "Temperature" :unit "°C" :statistic gpu_coretemp :rangelim gpu_crittemp :dynamic false)
        (sys-plot :plotheight 200 :plotlabel "Junction Temperature" :unit "°C" :statistic gpu_hottemp :rangelim gpu_crithtemp :dynamic false)
        (sys-plot :plotheight 200 :plotlabel "Power" :unit "W" :statistic gpu_power :rangelim gpu_pcap :dynamic false)
        (sys-plot :plotheight 200 :plotlabel "Memory Usage" :unit "%" :statistic gpu_memuse :rangelim 100 :dynamic false)
        (sys-plot :plotheight 200 :plotlabel "Memory Usage" :unit "MB" :statistic gpu_mem_mb :rangelim gpu_mem_total :dynamic false)
        (sys-plot :plotheight 200 :plotlabel "Core Frequency" :unit "MHz" :statistic gpu_freq :rangelim 3000 :dynamic true)
        (sys-plot :plotheight 200 :plotlabel "Memory Frequency" :unit "MHz" :statistic gpu_memfreq :rangelim 1500 :dynamic true)
      )
    )
  )
)

; Lists cpu cores
(defwidget cpu-corelist [gap]
  (box :orientation "v" :space-evenly false :spacing gap
    (for core in cpu_threadcount
      (label :class "cpu-thread-label" :text "CPU ${core}" :halign "start")
    )
  )
)

; Plots to display CPU usage/statistics
(defwidget cpu-graphs []
  (box :orientation "v"
    (scroll
      :class "graph-box-backdrop"
      :vscroll true
      :vexpand true
      (box
        :class "plot-scroll-box"
        :orientation "v"
        :spacing 15
        :space-evenly false
        (label :class "plot-header-text" :text "CPU Stats")
        (input :class "plot-tr-inputbox" :value "Time range (s)" :onaccept "${EWW_CMD} update plot_time_range={}s")
        (sys-plot :plotheight 200 :plotlabel "Overall Usage" :unit "%" :statistic cpu_use :rangelim 100 :dynamic false)
        (sys-plot :plotheight 200 :plotlabel "Temperature" :unit "°C" :statistic cpu_temp :rangelim 100 :dynamic false)
        (label :class "cpu-thread-overview" :text "CPU Thread Usage")
        (box :orientation "h" :space-evenly false
          (cpu-corelist :gap 0)
          (box :orientation "v" :space-evenly false
            (for thread in cpu_thread_use
              (box
                :orientation "h"
                :space-evenly false
                (scale :class "cpu-thread-scale" :active false :value thread :width 270 :halign "center")
                (label :class "cpu-thread-label" :text "${thread}%" :halign "end")
              )
            )
          )
        )
        (label :class "cpu-thread-overview" :text "CPU Clock Speeds")
        (box :orientation "h" :space-evenly false
          (cpu-corelist :gap 31)
          (box :orientation "v" :space-evenly false :spacing 5
            (for i in cpu_threadcount
              (freq-plot :unit "MHz" :statistic "${cpu_freqs[i]}" :rangelim 6000)
            )
          )
        )
      )
    )
  )
)

; Memory graphs
(defwidget mem-graphs []
  (box
    :orientation "v"
    (scroll
      :class "graph-box-backdrop"
      :vscroll true
      :vexpand true
      (box
        :class "plot-scroll-box"
        :orientation "v"
        :spacing 15
        :space-evenly false
        (label :class "plot-header-text" :text "Memory Stats")
        (input :class "plot-tr-inputbox" :value "Time range (s)" :onaccept "${EWW_CMD} update plot_time_range={}s")
        (sys-plot :plotheight 200 :plotlabel "Overall Usage" :unit "%" :statistic {round(EWW_RAM["used_mem_perc"], 0)} :rangelim 100 :dynamic false)
        (sys-plot :plotheight 200 :plotlabel "Overall Usage" :unit "MB" :statistic {round(EWW_RAM["used_mem"] / 1024, 0)} :rangelim {round(EWW_RAM["total_mem"] / 1024, 0)} :dynamic false)
        (sys-plot :plotheight 200 :plotlabel "Free Memory" :unit "MB" :statistic {round(EWW_RAM["free_mem"] / 1024, 0)} :rangelim {round(EWW_RAM["total_mem"] / 1024, 0)} :dynamic false)
        (sys-plot :plotheight 200 :plotlabel "Available Memory" :unit "MB" :statistic {round(EWW_RAM["available_mem"] / 1024, 0)} :rangelim {round(EWW_RAM["total_mem"] / 1024, 0)} :dynamic false)
        (sys-plot :plotheight 200 :plotlabel "Swap Usage" :unit "MB" :statistic {round(EWW_RAM["total_swap"] / 1024, 0) - round(EWW_RAM["free_swap"] / 1024, 0)} :rangelim {round(EWW_RAM["total_swap"] / 1024, 0)} :dynamic false)
      )
    )
  )
)

; Profile image and system information
(defwidget userview []
  (box
    :class "overview-box"
    :orientation "h"
    :space-evenly false
    (image
      :class "profile-img"
      :path "${profile_img}"
      :image-width 150
      :image-height 150
    )
    (box
      :orientation "v"
      :space-evenly false
      :valign "center"
      (label :class "host-label" :text "${username}@${hostname}" :halign "start")
      (box :orientation "h" :space-evenly false
        (label :class "sys-symbol-text" :text "" :valign "center")
        (label :class "sys-label-text" :text "Up ${uptime}" :halign "start" :valign "baseline")
      )
      (box :orientation "h" :space-evenly false
        (label :class "sys-symbol-text" :text "" :valign "center")
        (label :class "sys-label-text" :text "${packages} packages" :halign "start")
      )
    )
  )
)

; Display of current time/date and weather
(defwidget time-weather-box []
  (box
    :orientation "h"
    :space-evenly false
    :spacing 15
    :height 100
    (box
      :class "temporal-box"
      :valign "center"
      (box
        :orientation "v"
        :space-evenly false
        :width 214
        (label :class "time-label-text" :text time :halign "start")
        (label :class "date-label-text" :text date :halign "start" :wrap true)
      )
    )
    (label :class "divider-text" :text "") ; Adds dotted line to widget
    (box
      :class "temporal-box"
      :orientation "h"
      :valign "center"
      :space-evenly false
      (label :class "current-weather-text" :text current_weather :valign "center" :xalign 0 :wrap true)
    )
  )
)

; shows detailed weather information
(defwidget weather-view []
    (box :class "weather-box" :orientation "v" :space-evenly false
        (box :orientation "h" :space-evenly true
            (box :orientation "v" :space-evenly false
                (box :orientation "h" :space-evenly false
                    (label :class "current-weather-icon-big" :text current_icon)
                    (label :class "current-main-weather-text" :text "${round(current_temp, 1)}°C" :halign "start")
                )
                (label :class "current-vibes-weather-text" :text "Feels like ${current_vibes}°C" :halign "start")
            )
            (box :orientation "v" :space-evenly true
                (label :class "current-sub-weather-text" :text "Pressure: ${round(current_pressure / 1000, 2)} bar" :halign "start")
                (label :class "current-sub-weather-text" :text "Humidity: ${current_humidity}%" :halign "start")
                (label :class "current-sub-weather-text" :text "UVI: ${current_uvi}" :halign "start")
                (label :class "current-sub-weather-text" :text "Wind: ${round(current_windspeed, 2)} m/s (${current_winddir})" :halign "start")
            )
        )
        (box :class "hourly-scale-box" :orientation "h"
            (scroll :vscroll false :hscroll true :height 145 :space-evenly false
                (box :orientation "h" :space-evenly false :spacing 0
                    (for i in hourly_idxs
                        (box :orientation "v" :space-evenly false :spacing 3
                          (label :class "hourly-time-text" :text "${hourly_temps[i]}°C")
                          (scale
                              :flipped true
                              :class "hourly-temp-meter"
                              :value "${hourly_temps[i]}"
                              :active false
                              :hexpand true
                              :vexpand true
                              :min -20
                              :max 50
                              :orientation "v"
                          )
                          (label :class "hourly-time-text" :text '${hourly_times[i] >= 10 ? "${hourly_times[i]}" : "0${hourly_times[i]}"}:00' :angle 325)
                        )
                    )
                )
            )
        )
        (box :orientation "h"
            (for i in daily_idxs
                (box :orientation "v" :space-evenly true :spacing 0
                    (label :class "daily-name-text" :text "${daily_names[i]}")
                    (label :class "daily-temperature-icon" :text "${daily_icons[i]}")
                    (label :class "daily-description-text" :text "${daily_descs[i]}" :wrap true)
                    (label :class "daily-temperature-text" :text "${daily_temps[i]}°C" :valign "end")
                )
            )
        )
    )
)
; Button to open time-weather submenu
(defwidget time-weather-menu []
  (box :orientation "v" :space-evenly false
    (button
      :class "time-weather-button"
      :tooltip "Show calendar/weather"
      :onclick "${cal_reveal == false ? "${EWW_CMD} update cal_reveal=true" : "${EWW_CMD} update cal_reveal=false"}" "${cal_reveal == false ? "" : ""}"
    )
    (revealer
      :transition "slideup"
      :reveal cal_reveal
      :duration "500ms"
      (box :class "cal-weather-box" :orientation "v" :space-evenly false
        (box :class "cal-box" (calendar :class "overview-calendar" :day cur_day :year cur_year))
        (weather-view)
      )
    )
  )
)

; Circle to display usage of stat
(defwidget usage-circle [symbol usage clickcommand ?name]
  (box :orientation "v" :space-evenly true
    (circular-progress
      :class "stat-circle"
      :value usage
      :start-at 75
      :thickness 10
      (button :tooltip name :class "circle-label-button" :onclick clickcommand "${symbol}")
    )
  )
)

; Circular progress meters
(defwidget system-meters []
  (box :class "overview-box"
    (overlay
      (box :orientation "h" :height 200 :space-evenly true :vexpand true :hexpand true
        (label :class "placeholder" :text "" :tooltip "Toggle CPU view")
        (label :class "placeholder" :text "" :tooltip "Toggle RAM view")
        (label :class "placeholder" :text "" :tooltip "Toggle GPU view")
      )
      (box
        :orientation "h"
        :height 200
        :space-evenly true
        (label :class "circle-box-label" :text "${cpu_use}%" :valign "end")
        (label :class "circle-box-label" :text '${round(EWW_RAM["used_mem_perc"], 0)}%' :valign "end")
        (label :class "circle-box-label" :text "${gpu_use}%" :valign "end")
        
      )
      (box :orientation "v" :space-evenly true :height 200
        (box
          :class "circle-box"
          :orientation "h"
          :space-evenly true
          :spacing 30
          (usage-circle :symbol "" :usage cpu_use :clickcommand "${EWW_CMD} open --toggle cpu-plots" :name "Toggle CPU view")
          (usage-circle :symbol "﬙" :usage {round(EWW_RAM["used_mem_perc"], 0)} :clickcommand "${EWW_CMD} open --toggle mem-plots" :name "Toggle RAM view")
          (usage-circle :symbol "菉" :usage gpu_use :clickcommand "${EWW_CMD} open --toggle gpu-plots" :name "Toggle GPU view")
        )
      )
    )
  )
)

; Network information/display
(defwidget netbox []
  (box
    :class "overview-box"
    :orientation "h"
    :space-evenly true
    (box :orientation "v" :space-evenly false
      (box :orientation "h" :space-evenly false
        (label :class "network-symbol-text" :text e_netstatus :halign "start")
        (label :class "network-conn-text" :text e_conn :tooltip "${e_netstatus == "" ? 'Connected to LAN' : 'Cord disconnected/some other bullshit (T_T)'}" :halign "start" :valign "end" :limit-width 20)
      )
      (box :orientation "h" :space-evenly false
        (label :class "network-label-text" :text ' ${round(EWW_NET["enp5s0"]["NET_DOWN"] / 2097152, 1)} MB/s')
        (label :class "network-label-text" :text ' ${round(EWW_NET["enp5s0"]["NET_UP"] / 2097152, 1)} MB/s')
      )
    )
    (box :orientation "v" :space-evenly false
      (box :orientation "h" :space-evenly false
        (label :class "network-symbol-text" :text w_netstatus :halign "start")
        (label :class "network-conn-text" :tooltip "${w_netstatus == "直" ? 'Connected to ${w_conn}' : 'Not connected to any network'}" :text w_conn :halign "start" :valign "end" :limit-width 14)
      )
      (box :orientation "h" :space-evenly false
        (label :class "network-label-text" :halign "start" :text ' ${round(EWW_NET["wlp4s0"]["NET_DOWN"] / 2097152, 1)} MB/s')
        (label :class "network-label-text" :text ' ${round(EWW_NET["wlp4s0"]["NET_UP"] / 2097152, 1)} MB/s')
      )
    )
  )
)

; Information center at large
(defwidget information-center []
  (scroll
    (box
      :class "info-center-mainbox"
      :orientation "v"
      :space-evenly false
      :spacing 15
      (box
        :orientation "h"
        (label :class "info-center-header-text" :text "System Overview" :halign "start")
      )
      (userview)
      (time-weather-box)
      (time-weather-menu)
      (system-meters)
      (netbox)
      (sys-plot
        :plotheight 200
        :plotlabel "Thermal Sensor"
        :unit "°C"
        :statistic {EWW_TEMPS["T_SENSOR"]}
        :rangelim 70
        :dynamic false
      )
    )
  )
)


;
; Windows
;

; CPU plot submenu
(defwindow cpu-plots
  :class "graph-window"
  :monitor 1
  :stacking "fg"
  :windowtype "dialog"
  :geometry (geometry
    :width 400
    :height 650
    :y 40
    :x -1380
    :anchor "top right"
  )
  (cpu-graphs)
)

; RAM plot submenu
(defwindow mem-plots
  :class "graph-window"
  :monitor 1
  :stacking "fg"
  :windowtype "dialog"
  :geometry (geometry
    :width 400
    :height 650
    :y 40
    :x -960
    :anchor "top right"
  )
  (mem-graphs)
)

; GPU plot submenu
(defwindow gpu-plots
  :class "graph-window"
  :monitor 1
  :stacking "fg"
  :windowtype "dialog"
  :geometry (geometry
    :width 400
    :height 650
    :y 40
    :x -540
    :anchor "top right"
  )
  (gpu-graphs)
)

; Information center window
(defwindow info-center
  :class "info-center"
  :monitor 1
  :stacking "bg"
  :wm-ignore false
  :windowtype "desktop"
  :reserve (struts :distance "520px" :side "right")
  :geometry (geometry
    :width 500
    :height 970
    :y 40
    :x -12
    :anchor "top right"
  )
  (information-center)
)